// source: TursomSystemMsg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cn.tursom.im.protobuf.AddMailReceiver', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.GetLiveDanmuRecord', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.ListLiveRoomRequest', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.ListLiveRoomResponse', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.ListenLiveRoom', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.LiveDanmuRecord', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.LiveRecordReady', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord', null, global);
goog.exportSymbol('proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.ListenLiveRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.ListenLiveRoom.displayName = 'proto.cn.tursom.im.protobuf.ListenLiveRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.ListLiveRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.ListLiveRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.ListLiveRoomRequest.displayName = 'proto.cn.tursom.im.protobuf.ListLiveRoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cn.tursom.im.protobuf.ListLiveRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.ListLiveRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.ListLiveRoomResponse.displayName = 'proto.cn.tursom.im.protobuf.ListLiveRoomResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.AddMailReceiver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cn.tursom.im.protobuf.AddMailReceiver.repeatedFields_, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.AddMailReceiver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.AddMailReceiver.displayName = 'proto.cn.tursom.im.protobuf.AddMailReceiver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.displayName = 'proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.repeatedFields_, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.displayName = 'proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.LiveDanmuRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.LiveDanmuRecord.displayName = 'proto.cn.tursom.im.protobuf.LiveDanmuRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.GetLiveDanmuRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.displayName = 'proto.cn.tursom.im.protobuf.GetLiveDanmuRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.displayName = 'proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cn.tursom.im.protobuf.LiveRecordReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cn.tursom.im.protobuf.LiveRecordReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cn.tursom.im.protobuf.LiveRecordReady.displayName = 'proto.cn.tursom.im.protobuf.LiveRecordReady';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.ListenLiveRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.ListenLiveRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.ListenLiveRoom}
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.ListenLiveRoom;
  return proto.cn.tursom.im.protobuf.ListenLiveRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.ListenLiveRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.ListenLiveRoom}
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.ListenLiveRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.ListenLiveRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string roomId = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.ListenLiveRoom} returns this
 */
proto.cn.tursom.im.protobuf.ListenLiveRoom.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.ListLiveRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.ListLiveRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ListLiveRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomRequest}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.ListLiveRoomRequest;
  return proto.cn.tursom.im.protobuf.ListLiveRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.ListLiveRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomRequest}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.ListLiveRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.ListLiveRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ListLiveRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.ListLiveRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomidList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.ListLiveRoomResponse;
  return proto.cn.tursom.im.protobuf.ListLiveRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.ListLiveRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomidList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse} returns this
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string roomId = 2;
 * @return {!Array<string>}
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.getRoomidList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse} returns this
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.setRoomidList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse} returns this
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.addRoomid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.tursom.im.protobuf.ListLiveRoomResponse} returns this
 */
proto.cn.tursom.im.protobuf.ListLiveRoomResponse.prototype.clearRoomidList = function() {
  return this.setRoomidList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.AddMailReceiver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.AddMailReceiver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiver: jspb.Message.getFieldWithDefault(msg, 1, ""),
    all: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    roomidList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.AddMailReceiver}
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.AddMailReceiver;
  return proto.cn.tursom.im.protobuf.AddMailReceiver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.AddMailReceiver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.AddMailReceiver}
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAll(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.AddMailReceiver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.AddMailReceiver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAll();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRoomidList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string receiver = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.AddMailReceiver} returns this
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool all = 2;
 * @return {boolean}
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.getAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cn.tursom.im.protobuf.AddMailReceiver} returns this
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.setAll = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated string roomId = 3;
 * @return {!Array<string>}
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.getRoomidList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cn.tursom.im.protobuf.AddMailReceiver} returns this
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.setRoomidList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cn.tursom.im.protobuf.AddMailReceiver} returns this
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.addRoomid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.tursom.im.protobuf.AddMailReceiver} returns this
 */
proto.cn.tursom.im.protobuf.AddMailReceiver.prototype.clearRoomidList = function() {
  return this.setRoomidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    skip: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList;
  return proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkip(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSkip();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string reqId = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList} returns this
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.setReqid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string roomId = 2;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList} returns this
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 skip = 3;
 * @return {number}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList} returns this
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.setSkip = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList} returns this
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecordList.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recordlistList: jspb.Message.toObjectList(msg.getRecordlistList(),
    proto.cn.tursom.im.protobuf.LiveDanmuRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList;
  return proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 3:
      var value = new proto.cn.tursom.im.protobuf.LiveDanmuRecord;
      reader.readMessage(value,proto.cn.tursom.im.protobuf.LiveDanmuRecord.deserializeBinaryFromReader);
      msg.addRecordlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecordlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cn.tursom.im.protobuf.LiveDanmuRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional string reqId = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList} returns this
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.setReqid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string roomId = 2;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList} returns this
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated LiveDanmuRecord recordList = 3;
 * @return {!Array<!proto.cn.tursom.im.protobuf.LiveDanmuRecord>}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.getRecordlistList = function() {
  return /** @type{!Array<!proto.cn.tursom.im.protobuf.LiveDanmuRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cn.tursom.im.protobuf.LiveDanmuRecord, 3));
};


/**
 * @param {!Array<!proto.cn.tursom.im.protobuf.LiveDanmuRecord>} value
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList} returns this
*/
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.setRecordlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cn.tursom.im.protobuf.LiveDanmuRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cn.tursom.im.protobuf.LiveDanmuRecord}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.addRecordlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cn.tursom.im.protobuf.LiveDanmuRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList} returns this
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecordList.prototype.clearRecordlistList = function() {
  return this.setRecordlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.LiveDanmuRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.LiveDanmuRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    start: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stop: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.LiveDanmuRecord}
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.LiveDanmuRecord;
  return proto.cn.tursom.im.protobuf.LiveDanmuRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.LiveDanmuRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.LiveDanmuRecord}
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.LiveDanmuRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.LiveDanmuRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStop();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.LiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 start = 2;
 * @return {number}
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.tursom.im.protobuf.LiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 stop = 3;
 * @return {number}
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.getStop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.tursom.im.protobuf.LiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.LiveDanmuRecord.prototype.setStop = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    livedanmurecordid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecord}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.GetLiveDanmuRecord;
  return proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecord}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLivedanmurecordid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLivedanmurecordid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string reqId = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.prototype.setReqid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string liveDanmuRecordId = 2;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.prototype.getLivedanmurecordid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.GetLiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.GetLiveDanmuRecord.prototype.setLivedanmurecordid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exist: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord;
  return proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExist(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string reqId = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.setReqid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool exist = 2;
 * @return {boolean}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.getExist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.setExist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord} returns this
 */
proto.cn.tursom.im.protobuf.ReturnLiveDanmuRecord.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.toObject = function(opt_includeInstance) {
  return proto.cn.tursom.im.protobuf.LiveRecordReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cn.tursom.im.protobuf.LiveRecordReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    start: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stop: jspb.Message.getFieldWithDefault(msg, 4, 0),
    url: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cn.tursom.im.protobuf.LiveRecordReady}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cn.tursom.im.protobuf.LiveRecordReady;
  return proto.cn.tursom.im.protobuf.LiveRecordReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cn.tursom.im.protobuf.LiveRecordReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cn.tursom.im.protobuf.LiveRecordReady}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStop(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cn.tursom.im.protobuf.LiveRecordReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cn.tursom.im.protobuf.LiveRecordReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStop();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string reqId = 1;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.LiveRecordReady} returns this
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.setReqid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string roomId = 2;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.LiveRecordReady} returns this
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start = 3;
 * @return {number}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.tursom.im.protobuf.LiveRecordReady} returns this
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 stop = 4;
 * @return {number}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.getStop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cn.tursom.im.protobuf.LiveRecordReady} returns this
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.setStop = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cn.tursom.im.protobuf.LiveRecordReady} returns this
 */
proto.cn.tursom.im.protobuf.LiveRecordReady.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.cn.tursom.im.protobuf);
